#!/usr/bin/perl

use warnings;
use strict;

use Goodnight::Game;

use IO::Prompt;
use Lingua::EN::Inflect qw(PL PL_V);

require Text::Wrap;
sub say (@) {
    local $Text::Wrap::columns;
    $Text::Wrap::columns = 80;

    print Text::Wrap::wrap('', '', @_), "\n";
}

my %command_defs = (
    look        => { look => [qw(where ahead time)] },
    who         => { look => [qw(who)] },
    stats       => { look => [qw(stats)] },
    time        => { look => [qw(time)] },

    left        => { call => sub { turn("left") },
                     look => [] },
    right       => { call => sub { turn("right") },
                     look => [] },

    north       => { call => sub { face(Goodnight::Map::Direction::NORTH) },
                     look => [] },
    northeast   => { call => sub { face(Goodnight::Map::Direction::NORTHEAST) },
                     look => [] },
    east        => { call => sub { face(Goodnight::Map::Direction::EAST) },
                     look => [] },
    southeast   => { call => sub { face(Goodnight::Map::Direction::SOUTHEAST) },
                     look => [] },
    south       => { call => sub { face(Goodnight::Map::Direction::SOUTH) },
                     look => [] },
    southwest   => { call => sub { face(Goodnight::Map::Direction::SOUTHWEST) },
                     look => [] },
    west        => { call => sub { face(Goodnight::Map::Direction::WEST) },
                     look => [] },
    northwest   => { call => sub { face(Goodnight::Map::Direction::NORTHWEST) },
                     look => [] },

    forward     => { call => \&forward,
                     look => [qw(where ahead time)] },

    seek        => { look => [qw(seek)] },

    fight       => { call => \&fight },

    hide        => { call => \&hide },
    show        => { call => \&show },

    switch      => { call => \&switch },

    help        => { call => \&help },

    quit        => { call => \&quit },
    exit        => { call => \&quit },
);

my %command_shortcuts = (
    n   => "north",
    ne  => "northeast",
    e   => "east",
    se  => "southeast",
    s   => "south",
    sw  => "southwest",
    w   => "west",
    nw  => "northwest",
    l   => "look",
    f   => "forward",
    '?' => "help",
    q   => "quit",
);

my (%commands, %conflicts);
for my $key (keys %command_defs) {
    my @bits = split '', $key;
    pop @bits;

    my $cmd = "";
    while (my $bit = shift @bits) {
        $cmd .= $bit;
        if (exists $commands{$cmd}) {
            $conflicts{$cmd}->{$key} = 1;
            $conflicts{$cmd}->{$commands{$cmd}} = 1;
        }
        else {
            $commands{$cmd} = $key;
        }
    }
}
delete $commands{$_} for keys %conflicts;
map { $commands{$_} = $_; delete $conflicts{$_} } keys %command_defs;
map { $commands{$_} = $command_shortcuts{$_}; delete $conflicts{$_} } keys %command_shortcuts;

my $cmd_regex_str = "(?:" . join("|", map { s/([?])/\\$1/g; $_ } sort keys %commands) . ")";
my $cmd_regex = qr/^$cmd_regex_str(?: |$)/i;

my $game = Goodnight::Game->new;
my $map = $game->get_map;

my $me = $game->LUXOR;

look(qw(where ahead time));

while (! $game->is_game_over) {
    my $cmd;
    while ($cmd = prompt "What now? ", -until => $cmd_regex) {
        next if $cmd eq "";

        if (exists $conflicts{$cmd}) {
            say "'$cmd' is ambiguous. Did you mean: " . join(" ", sort keys %{$conflicts{$cmd}});
        }
        else {
            say "Sorry, I don't understand '$cmd'.";
        }
    }

    ($cmd, my @args) = split /\s+/, $cmd;

    my $defs = $command_defs{$commands{$cmd}};

    my $error;
    if (exists $defs->{call}) {
        $error = $defs->{call}->(@args);
    }

    if (not $error and exists $defs->{look}) {
        my $want = $defs->{look};
        if (ref $want eq "ARRAY") {
            look(@{$defs->{look}});
        }
        else {
            look();
        }
    }
}

sub cap {
    return uc(substr "$_[0]", 0, 1) . substr "$_[0]", 1;
}

sub look {
    if (! $me->is_alive) {
        say $me;
        say cap($me->get_killed) . " slew him.";
        return;
    }

    my @want = @_;
    @want = qw(where ahead) if @want == 0;
    my %want = map { $_ => 1 } @want;

    my $location = $me->get_location;

    my $direction = $me->get_direction;
    my $looking = $map->get_looking_towards($location, $direction);

    if ($want{where}) {
        say cap($me);

        my $msg = "He stands " . $location->get_feature->at . " $location " .
                  "looking $direction";
        
        if ($location->get_domain != $looking->get_domain or
            $location->get_feature != $looking->get_feature) {
            $msg .= " to $looking.";
        }
        else {
            $msg .= ".";
        }

        say $msg;
    }

    if ($want{stats}) {
        say "The ice fear is " . $location->describe_ice_fear . ". " .
            $me->get_name . " is " . $me->get_courage . ".";
        say "He is " . $me->get_condition . ".";
    }

    sub character_commands {
        my ($c) = @_;

        my $line = "";

        my $warriors = $c->get_warriors;
        my $riders = $c->get_riders;

        if ($warriors->get_how_many > 0 or $riders->get_how_many > 0) {
            $line .= " He commands ";

            if ($warriors->get_how_many > 0 and $riders->get_how_many > 0) {
                $line .= "$warriors and $riders";
            }
            elsif ($warriors->get_how_many > 0) {
                $line .= $warriors;
            }
            elsif ($riders->get_how_many > 0) {
                $line .= $riders;
            }
            
            $line .= " of the " . $c->get_race . ".";
        }
    }

    if ($want{who}) {
        my $guard = $location->get_guard;
        if($guard) {
            say "$guard of the " . $guard->get_race . " guard the " . $location->get_feature . ".";
        }

        for my $c (@{$location->get_characters}) {
            next if $c == $me;

            say cap($c) . " is here." . character_commands($c);
        }
    }

    if ($want{ahead}) {
        my $ahead = $game->get_map->get_in_front($location, $direction);

        for my $c (@{$ahead->get_characters}) {
            say "Ahead stands $c." . character_commands($c);
        }
    }

    if ($want{seek}) {
        my $object = $location->get_object;

        if ($object->is_beast) {
            my $msg = "He has found $object";
            if ($me->is_hidden) {
                $msg .= ". " . $me->name . " is hidden.";
            }
            else {
                $msg .= " and must ";
                if ($me->can_fight and $me->can_hide) {
                    $msg .= "fight or hide.";
                }
                elsif ($me->can_fight) {
                    $msg .= "fight.";
                }
                elsif ($me->can_hide) {
                    $msg .= "hide.";
                }
            }

            say $msg;
        }

        else {
            say "He has found " . $object->as_string($location) . ".";
        }
    }

    if ($want{time}) {
        say $me->get_time;
    }

}

sub turn {
    my ($turn) = @_;

    if ($turn eq "left") {
        $me->set_direction($me->get_direction->turn_left);
    }
    elsif ($turn eq "right") {
        $me->set_direction($me->get_direction->turn_right);
    }

    return;
}

sub face {
    my ($direction) = @_;

    $me->set_direction($direction);

    return;
}

sub forward {
    if ($me->can_walk_forward) {
        $me->walk_forward;
        return;
    }

    say "He can't go that way!";
    return 1;
}

sub hide {
    if ($me->can_hide and !$me->is_hidden) {
        $me->set_hidden(1);
        say $me->get_name . " is hidden.";
        return;
    }

    say "He can't hide!";
}

sub show {
    if ($me->is_hidden) {
        $me->set_hidden(0);
        say $me->get_name . " is revealed.";
        return;
    }

    say "He's not hidden!";
}

sub fight {
    if ($me->can_fight) {
        my $object = $me->get_location->get_object;

        $me->fight;
        if ($me->is_alive) {
            say "He slew the $object.";
        }
        else {
            say cap("$object slew him.");
        }

        return;
    }

    say "He can't fight!";
}

sub switch {
    my ($who) = @_;
    
    my %controlled = map { lc($_->get_name) => $_ }
                     grep { $game->is_controllable($_) }
                     @{$game->get_characters};

    if (not $who) {
        say "Characters you control: " . join(" ", map { cap($_) } keys %controlled);
        return;
    }

    if (exists $controlled{lc $who}) {
        $me = $controlled{lc $who};
        look(qw(where ahead time));
        return;
    }

    say "You can't control him!";
}

sub help {
    my %sc;
    push @{$sc{$command_shortcuts{$_}}}, $_ for keys %command_shortcuts;

    say "Available commands: " . join(" ", map { $_ . (exists $sc{$_} ? (" [" . join(" ", @{$sc{$_}}) . "]") : "") } sort keys %command_defs);
}

sub quit {
    exit 0;
}
